{"version":3,"file":"js/345-1059a3a77bf5b0b18dba.chunk.js","mappings":"yKAAe,SAASA,EAAOC,EAAOC,EAAW,CAC7C,IAAIC,EAAIC,EACR,KAAM,CAAE,OAAAC,EAAQ,YAAAC,CAAY,EAAIL,EAIhC,QAHc,CAACI,GAAUA,EAAO,SAAW,EACrCC,EACAD,EAAO,GAAG,EAAE,GAAO,GAAAF,EAAK,KAAK,iBAAmB,MAAQA,IAAO,SAAkBA,EAAG,KAAKD,CAAS,EAAK,EAAI,KAChG,MAAQE,EAAK,KAAK,UAAY,MAAQA,IAAO,OAAS,OAASA,EAAG,aAAe,EACtG,C,+ECJA,eAAsB,oBAAqBG,GAAU,CACjD,MAAMC,KAAS,MAAa,CACxB,cAAeC,GAAUA,EAAO,SAAS,EACzC,SAAUC,EACV,WAAYC,EACZ,aAAc,CAAE,QAASJ,EAAO,OAAQ,CAC5C,CAAC,EACD,MAAO,CACH,OAAAA,EACA,WAAYC,EAAO,WACnB,MAAOA,EAAO,MACd,OAAM,IACN,cAAe,YACf,KAAM,QACN,cAAe,CACX,MAAO,SACP,QAAS,MACb,CACJ,CACJ,CAAC,EACD,MAAME,EAAW,CACb,YAAa,kBACb,OAAQ,4DACR,OAAQ,0DACR,QAAS,kBACb,EACMC,EAAa,CACf,SAAU,IAAC,KAAE,GAAG,KAAG,MAAK,cAAY,SAAI,KAAE,GAAG,CAAC,CAAC,KAAG,KAAE,GAAG,CAAC,EACxD,SAAU,CAACC,EAAS,UAAU,KAAG,KAAE,GAAG,EAAG,OAAO,EAChD,MAAMC,EAAO,CACT,OAAQA,EAAM,KAAM,CAChB,IAAK,SACD,MAAO,cACX,IAAK,SACD,MAAO,cACX,IAAK,cACD,OAAQA,EAAM,MAAO,CACjB,IAAK,IACD,MAAO,YACX,IAAK,IACD,MAAO,aACf,CACA,OAAO,KACX,IAAK,UACD,OAAQA,EAAM,MAAO,CACjB,IAAK,OACL,IAAK,QACD,MAAO,eACX,IAAK,OACD,MAAO,WACf,CACA,OAAO,IACf,CACJ,EACA,YAAa,IAAC,KAAE,SAAU,QAAQ,CAAC,EACnC,YAAa,IAAC,KAAE,SAAU,QAAQ,CAAC,EACnC,aAAc,IAAC,KAAE,UAAW,SAAS,CAAC,EACtC,UAAW,IAAC,KAAE,UAAW,SAAS,CAAC,EACnC,UAAW,IAAC,KAAE,GAAG,KAAG,MAAK,WAAS,SAAI,KAAE,GAAG,CAAC,CAAC,KAAG,KAAE,GAAG,CAAC,EACtD,YAAa,IAAC,KAAE,GAAG,KAAG,MAAK,iBAAe,SAAI,KAAE,GAAG,CAAC,CAAC,KAAG,KAAE,GAAG,CAAC,EAC9D,YAAa,CAACD,EAAS,WAAW,KAAG,KAAE,GAAG,EAAG,OAAO,CACxD,EACA,SAASA,EAASE,EAAO,CACrB,MAAO,CACH,MAAAA,EACA,MAAQD,GAAUA,EAAM,OAAS,SACjC,OAAOZ,EAAOY,EAAO,CACjBZ,EAAM,KAAOY,EAAM,MAAM,MAAM,EAAG,EAAE,CACxC,CACJ,CACJ,C","sources":["webpack://decidim-development-app/./node_modules/codemirror-graphql/esm/utils/mode-indent.js","webpack://decidim-development-app/./node_modules/codemirror-graphql/esm/variables/mode.js"],"sourcesContent":["export default function indent(state, textAfter) {\n    var _a, _b;\n    const { levels, indentLevel } = state;\n    const level = !levels || levels.length === 0\n        ? indentLevel\n        : levels.at(-1) - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n//# sourceMappingURL=mode-indent.js.map","import CodeMirror from 'codemirror';\nimport { list, t, onlineParser, opt, p, } from 'graphql-language-service';\nimport indent from '../utils/mode-indent';\nCodeMirror.defineMode('graphql-variables', config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatSpace(),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nconst LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nconst ParseRules = {\n    Document: [p('{'), list('Variable', opt(p(','))), p('}')],\n    Variable: [namedKey('variable'), p(':'), 'Value'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [t('String', 'string')],\n    BooleanValue: [t('Keyword', 'builtin')],\n    NullValue: [t('Keyword', 'keyword')],\n    ListValue: [p('['), list('Value', opt(p(','))), p(']')],\n    ObjectValue: [p('{'), list('ObjectField', opt(p(','))), p('}')],\n    ObjectField: [namedKey('attribute'), p(':'), 'Value'],\n};\nfunction namedKey(style) {\n    return {\n        style,\n        match: (token) => token.kind === 'String',\n        update(state, token) {\n            state.name = token.value.slice(1, -1);\n        },\n    };\n}\n//# sourceMappingURL=mode.js.map"],"names":["indent","state","textAfter","_a","_b","levels","indentLevel","config","parser","stream","LexRules","ParseRules","namedKey","token","style"],"sourceRoot":""}