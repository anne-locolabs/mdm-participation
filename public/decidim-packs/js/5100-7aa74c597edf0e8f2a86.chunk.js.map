{"version":3,"file":"js/5100-7aa74c597edf0e8f2a86.chunk.js","mappings":"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","sources":["webpack://decidim-development-app/./node_modules/codemirror/addon/comment/comment.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.search(nonWS) === -1 ? line : line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected()\n        self.replaceRange(endString, to);\n        if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to)\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"],"names":["mod","CodeMirror","noOptions","nonWS","Pos","cmp","firstNonWS","str","found","cm","options","minLine","ranges","mode","i","from","to","probablyInsideString","pos","line","getMode","self","firstLine","commentString","end","pad","blankLines","baseString","whitespace","cut","startString","endString","lastLineHasText","lead","atCursor","empty","start","lineString","lines","didSomething","lineComment","endPos","startLine","open","endLine","close","insideStart","insideEnd","lastStart","firstEnd","almostLastStart","openEnd","foundEnd"],"sourceRoot":""}